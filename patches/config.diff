--- UaNet/src/config.py	2024-07-13 12:59:49.218792720 +0330
+++ UaNet/src/config.py	2024-07-13 12:58:09.978435995 +0330
@@ -36,10 +36,7 @@
     'data_dir': '../data/raw',
     'preprocessed_data_dir': '../data/preprocessed',
     # 28 OAR names, names from the original dicom RT
-    'roi_names': ['Brachial Plexus', 'Brain Stem', 'ConstrictorNaris', 'Ear-L', 'Ear-R', 'Eye-L', 'Eye-R',
-        'Hypophysis', 'Larynx', 'Lens L', 'Lens R', 'Mandible', 'Optical Chiasm', 'Optical Nerve L',
-        'Optical Nerve R', 'Oral Cavity', 'Parotid L', 'Parotid R', 'SmgL', 'SmgR', 'Spinal Cord',
-        'Sublingual Gland', 'Temporal Lobe L', 'Temporal Lobe R', 'Thyroid', 'TMJL', 'TMJR', 'Trachea'],
+    'roi_names': ['mass'],
     
     # name used for legend for the figures in the paper, for better consistency
     'paper_roi_names': ['Brachial Plexus', 'Brain Stem', 'Constrictor Naris', 'Ear L', 'Ear R', 'Eye L', 'Eye R',
@@ -53,19 +50,19 @@
     # since the max input would be centered at the image with size train_max_crop_size,
     # there is no need to load more than that.
     'num_slice': 180,
-    'num_x': 272,
-    'num_y': 272,
+    'num_x': 544,
+    'num_y': 544,
 
     # maximum input size to the network
-    'train_max_crop_size': [160, 240, 240], 
+    'train_max_crop_size': [160, 512, 512],
     'bbox_border': 8,
-    'pad_value': -1024,
-    'jitter_range': [4, 16, 16],
-    'stride': [16, 32, 32],
-    'test_max_size': [256, 320, 320], 
+    'pad_value': -1,
+    'jitter_range': [0, 0, 0],
+    'stride': [1, 3, 3],
+    'test_max_size': [256, 512, 512],
 
     # whether to do affine and elastic transformation
-    'do_elastic': True,
+    'do_elastic': False,
     'do_postprocess': False,
 }
 
@@ -146,7 +143,7 @@
 
 train_config = {
     'net': 'UaNet',
-    'batch_size': 1,
+    'batch_size': 4,
 
     'lr_schedule': lr_shedule,
     'optimizer': 'Adam',
@@ -154,7 +151,7 @@
     'weight_decay': 1e-4,
 
     # total # of epochs
-    'epochs': 200,
+    'epochs': 100,
 
     # save check point (model weights) every epoch_save epochs
     'epoch_save': 1,
